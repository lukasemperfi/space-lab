{"version":3,"file":"ContactForm.min.js","sources":["components/shared/ContactForm.js"],"sourcesContent":["class ContactForm extends HTMLElement {\n  constructor() {\n    super();\n    this.formData = {\n      name: '',\n      email: '',\n      message: '',\n    };\n    this.errors = {};\n    this.isValid = false;\n  }\n\n  connectedCallback() {\n    this.innerHTML = `\n      <div class=\"contact-form-container\">\n        <form class=\"contact-form\" id=\"contact-form\">\n          <div class=\"contact-form__field\">\n            <input \n              class=\"contact-form__input\" \n              type=\"text\" \n              name=\"name\" \n              id=\"name\"\n              placeholder=\"Name\" \n              autocomplete=\"off\"\n            />\n            <div class=\"contact-form__error\" id=\"name-error\"></div>\n          </div>\n          \n          <div class=\"contact-form__field\">\n            <input \n              class=\"contact-form__input\" \n              type=\"email\"  \n              name=\"email\" \n              id=\"email\"\n              placeholder=\"Mail\" \n              autocomplete=\"off\"\n            />\n            <div class=\"contact-form__error\" id=\"email-error\"></div>\n          </div>\n          \n          <div class=\"contact-form__field\">\n            <input \n              class=\"contact-form__input\" \n              type=\"text\" \n              name=\"message\" \n              id=\"message\"\n              placeholder=\"Your message\" \n              autocomplete=\"off\"\n            />\n            <div class=\"contact-form__error\" id=\"message-error\"></div>\n          </div>\n          \n                    <button \n            class=\"contact-form__button wavy-button--reverse\" \n            type=\"submit\"\n            id=\"submit-btn\"\n            disabled\n          >\n            Send\n          </button>\n        </form>\n      </div>\n    `;\n\n    this.initializeForm();\n  }\n\n  initializeForm() {\n    this.form = this.querySelector('#contact-form');\n    this.submitBtn = this.querySelector('#submit-btn');\n    this.inputs = this.querySelectorAll('.contact-form__input');\n    this.errorElements = this.querySelectorAll('.contact-form__error');\n\n    // Добавляем обработчики событий\n    this.form.addEventListener('submit', e => this.handleSubmit(e));\n    this.inputs.forEach(input => {\n      input.addEventListener('input', () => this.handleInputChange(input));\n      input.addEventListener('blur', () => this.validateField(input));\n      input.addEventListener('focus', () => this.clearFieldError(input));\n    });\n\n    // Инициализируем валидацию\n    this.updateSubmitButton();\n  }\n\n  handleInputChange(input) {\n    const fieldName = input.name;\n    this.formData[fieldName] = input.value.trim();\n    this.validateField(input);\n    this.updateSubmitButton();\n  }\n\n  validateField(input) {\n    const fieldName = input.name;\n    const value = input.value.trim();\n    const errorElement = this.querySelector(`#${fieldName}-error`);\n\n    let error = '';\n\n    switch (fieldName) {\n      case 'name':\n        if (!value) {\n          error = 'Name is required';\n        } else if (value.length < 2) {\n          error = 'Name must be at least 2 characters';\n        } else if (value.length > 50) {\n          error = 'Name must be less than 50 characters';\n        }\n        break;\n\n      case 'email':\n        if (!value) {\n          error = 'Email is required';\n        } else if (!this.isValidEmail(value)) {\n          error = 'Please enter a valid email address';\n        }\n        break;\n\n      case 'message':\n        if (!value) {\n          error = 'Message is required';\n        } else if (value.length < 10) {\n          error = 'Message must be at least 10 characters';\n        } else if (value.length > 500) {\n          error = 'Message must be less than 500 characters';\n        }\n        break;\n    }\n\n    if (error) {\n      this.errors[fieldName] = error;\n      this.showFieldError(input, error);\n    } else {\n      delete this.errors[fieldName];\n      this.clearFieldError(input);\n    }\n\n    return !error;\n  }\n\n  isValidEmail(email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    return emailRegex.test(email);\n  }\n\n  showFieldError(input, error) {\n    const fieldName = input.name;\n    const errorElement = this.querySelector(`#${fieldName}-error`);\n\n    if (errorElement) {\n      errorElement.textContent = error;\n      errorElement.style.display = 'block';\n    }\n\n    input.classList.add('contact-form__input--error');\n  }\n\n  clearFieldError(input) {\n    const fieldName = input.name;\n    const errorElement = this.querySelector(`#${fieldName}-error`);\n\n    if (errorElement) {\n      errorElement.textContent = '';\n      errorElement.style.display = 'none';\n    }\n\n    input.classList.remove('contact-form__input--error');\n  }\n\n  updateSubmitButton() {\n    const hasErrors = Object.keys(this.errors).length > 0;\n    const hasAllFields = Object.values(this.formData).every(\n      value => value.trim() !== ''\n    );\n\n    this.isValid = !hasErrors && hasAllFields;\n    this.submitBtn.disabled = !this.isValid;\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n\n    if (!this.isValid) {\n      return;\n    }\n\n    // Показываем тост об успешной отправке\n    this.showSuccessToast();\n\n    // Очищаем форму\n    this.resetForm();\n  }\n\n  showSuccessToast() {\n    // Ищем существующий тост или создаем новый\n    let toast = document.querySelector('toast-notification');\n    if (!toast) {\n      toast = document.createElement('toast-notification');\n      document.body.appendChild(toast);\n    }\n\n    toast.show(\n      'Form submitted successfully! Thank you for your message.',\n      'success'\n    );\n  }\n\n  resetForm() {\n    this.form.reset();\n    this.formData = { name: '', email: '', message: '' };\n    this.errors = {};\n\n    // Очищаем все ошибки\n    this.errorElements.forEach(errorEl => {\n      errorEl.textContent = '';\n      errorEl.style.display = 'none';\n    });\n\n    // Убираем классы ошибок с инпутов\n    this.inputs.forEach(input => {\n      input.classList.remove('contact-form__input--error');\n    });\n\n    this.updateSubmitButton();\n  }\n}\n\ncustomElements.define('contact-form', ContactForm);\n"],"names":["ContactForm","HTMLElement","constructor","super","this","formData","name","email","message","errors","isValid","connectedCallback","innerHTML","initializeForm","form","querySelector","submitBtn","inputs","querySelectorAll","errorElements","addEventListener","e","handleSubmit","forEach","input","handleInputChange","validateField","clearFieldError","updateSubmitButton","fieldName","value","trim","let","error","length","isValidEmail","showFieldError","test","errorElement","textContent","style","display","classList","add","remove","hasErrors","Object","keys","hasAllFields","values","every","disabled","preventDefault","showSuccessToast","resetForm","toast","document","createElement","body","appendChild","show","reset","errorEl","customElements","define"],"mappings":"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"}